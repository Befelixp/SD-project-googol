package meta1sd;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.FileReader;
import com.google.gson.reflect.TypeToken;

/**
 * IndexStorageBarrel - Componente respons√°vel por armazenar e indexar dados de
 * sites web.
 * Implementa a interface RMIIndexStorageBarrel para comunica√ß√£o remota.
 */
public class IndexStorageBarrel extends UnicastRemoteObject implements RMIIndexStorageBarrel {
    private static final long serialVersionUID = 1L;
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    // Identificador √∫nico da barrel
    private final int barrelId;

    // Locks para controle de concorr√™ncia
    private final ReadWriteLock indexLock = new ReentrantReadWriteLock();
    private final ReadWriteLock stateLock = new ReentrantReadWriteLock();

    // Refer√™ncias para outras barrels no sistema - Thread-safe
    private final Map<Integer, RMIIndexStorageBarrel> barrels = new ConcurrentHashMap<>();

    // Estruturas para indexa√ß√£o e rastreamento - Thread-safe
    private final Map<String, Set<String>> invertedIndex = new ConcurrentHashMap<>(); // Palavras -> URLs
    private final Map<String, Integer> urlReferences = new ConcurrentHashMap<>(); // URL -> contagem de refer√™ncias
    private final Map<String, String> urlTexts = new ConcurrentHashMap<>(); // URL -> Texto associado
    private final Map<String, List<String>> incomingLinks = new ConcurrentHashMap<>(); // URL -> Lista de URLs que
                                                                                       // apontam para ela

    // Conjunto de sites armazenados localmente - Sincronizado externamente
    private final Set<SiteData> siteDataSet = Collections.synchronizedSet(new HashSet<>());

    /**
     * Retorna o √≠ndice invertido (palavra -> conjunto de URLs).
     *
     * @return Mapa contendo o √≠ndice invertido.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    @Override
    public Map<String, Set<String>> getInvertedIndex() throws RemoteException {
        indexLock.readLock().lock();
        try {
            // Retorna uma c√≥pia para evitar modifica√ß√µes externas
            Map<String, Set<String>> result = new ConcurrentHashMap<>();
            for (Map.Entry<String, Set<String>> entry : invertedIndex.entrySet()) {
                result.put(entry.getKey(), new HashSet<>(entry.getValue()));
            }
            return result;
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * Retorna o mapa de links de entrada (URL -> lista de URLs que apontam para
     * ela).
     *
     * @return Mapa contendo os links de entrada.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    @Override
    public Map<String, List<String>> getIncomingLinksMap() throws RemoteException {
        indexLock.readLock().lock();
        try {
            // Retorna uma c√≥pia para evitar modifica√ß√µes externas
            Map<String, List<String>> result = new ConcurrentHashMap<>();
            for (Map.Entry<String, List<String>> entry : incomingLinks.entrySet()) {
                result.put(entry.getKey(), new ArrayList<>(entry.getValue()));
            }
            return result;
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * Retorna o mapa de refer√™ncias de URL (URL -> contagem de refer√™ncias).
     *
     * @return Mapa contendo as refer√™ncias de URL.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    @Override
    public Map<String, Integer> getUrlReferences() throws RemoteException {
        indexLock.readLock().lock();
        try {
            return new ConcurrentHashMap<>(urlReferences);
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * Retorna o mapa de textos de URL (URL -> texto associado).
     *
     * @return Mapa contendo os textos de URL.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    @Override
    public Map<String, String> getUrlTexts() throws RemoteException {
        indexLock.readLock().lock();
        try {
            return new ConcurrentHashMap<>(urlTexts);
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * Obt√©m o timestamp formatado para logs.
     *
     * @return O timestamp formatado.
     */
    private String getTimestamp() {
        return LocalDateTime.now().format(TIME_FORMATTER);
    }

    /**
     * Construtor da barrel.
     *
     * @param barrelId Identificador √∫nico da barrel.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public IndexStorageBarrel(int barrelId) throws RemoteException {
        this.barrelId = barrelId;
        System.out.println(getTimestamp() + " : üöÄ System " + barrelId + " is starting up");

        // Criar diret√≥rio de dados se n√£o existir
        File dataDir = new File("data");
        if (!dataDir.exists()) {
            boolean created = dataDir.mkdirs();
            if (created) {
                System.out.println(getTimestamp() + " : üìÅ Diret√≥rio de dados criado");
            }
        }

        // Carregar estado local primeiro
        carregarEstadoDeJSON("data/estado_barrel_" + barrelId + ".json");

        // A sincroniza√ß√£o com outras barrels ser√° feita ap√≥s o registro no gateway
        // atrav√©s do m√©todo syncWithExistingBarrels()
    }

    /**
     * Retorna o conjunto de dados do site armazenados.
     *
     * @return Conjunto de dados do site.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    @Override
    public Set<SiteData> getSiteDataSet() throws RemoteException {
        synchronized (siteDataSet) {
            return new HashSet<>(siteDataSet);
        }
    }

    /**
     * Sincroniza com barrels existentes obtidas do gateway.
     *
     * @param gateway Interface do gateway para obter as barrels registradas.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public synchronized void syncWithExistingBarrels(RMIGatewayIBSDownloader gateway) throws RemoteException {
        try {
            Map<Integer, RMIIndexStorageBarrel> existingBarrels = gateway.getBarrels();

            // Remover a si mesmo do mapa, caso esteja presente
            existingBarrels.remove(this.barrelId);

            if (existingBarrels.isEmpty()) {
                System.out.println(getTimestamp() + " : üìù N√£o h√° outras barrels para sincronizar");
                return;
            }

            System.out.println(getTimestamp() + " : üîÑ Iniciando sincroniza√ß√£o com barrels existentes...");
            System.out.println(getTimestamp() + " : üìä Barrels dispon√≠veis: " + existingBarrels.keySet());

            // Tentar sincronizar com a primeira barrel ativa dispon√≠vel
            boolean syncSuccess = false;
            for (Map.Entry<Integer, RMIIndexStorageBarrel> entry : existingBarrels.entrySet()) {
                try {
                    int targetBarrelId = entry.getKey();
                    RMIIndexStorageBarrel existingBarrel = entry.getValue();

                    // Verificar se a barrel est√° ativa
                    System.out.println(
                            getTimestamp() + " : üîç Verificando se a barrel " + targetBarrelId + " est√° ativa...");
                    existingBarrel.gatewaypong("NewBarrel" + barrelId);

                    // Sincronizar estado (fazendo merge)
                    System.out.println(
                            getTimestamp() + " : üîÑ Iniciando sincroniza√ß√£o (merge) com barrel " + targetBarrelId
                                    + "...");
                    syncFromExistingBarrel(existingBarrel);

                    System.out.println(
                            getTimestamp() + " : ‚úÖ Sincronizado (merge) com sucesso com a barrel " + targetBarrelId);
                    syncSuccess = true;
                    break; // Sincroniza apenas com a primeira ativa
                } catch (RemoteException e) {
                    System.out.println(getTimestamp() + " : ‚ö†Ô∏è Barrel " + entry.getKey()
                            + " n√£o est√° respondendo, tentando pr√≥xima...");
                    continue;
                }
            }

            if (!syncSuccess && !existingBarrels.isEmpty()) {
                System.out.println(getTimestamp() + " : ‚ö†Ô∏è N√£o foi poss√≠vel sincronizar com nenhuma barrel existente");
            }

            // Salvar o estado ap√≥s a sincroniza√ß√£o
            saveState("data/estado_barrel_" + barrelId + ".json");
            System.out.println(getTimestamp() + " : üíæ Estado salvo ap√≥s sincroniza√ß√£o.");

        } catch (Exception e) {
            System.err.println(getTimestamp() + " : ‚ùå Erro durante a tentativa de sincroniza√ß√£o: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * M√©todo otimizado para sincronizar dados de uma barrel existente, fazendo
     * MERGE dos dados.
     *
     * @param existingBarrel A barrel existente para sincroniza√ß√£o.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    /**
     * M√©todo otimizado para sincronizar dados de uma barrel existente, fazendo
     * MERGE dos dados e evitando duplicatas.
     *
     * @param existingBarrel A barrel existente para sincroniza√ß√£o.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public synchronized void syncFromExistingBarrel(RMIIndexStorageBarrel existingBarrel) throws RemoteException {
        System.out.println(getTimestamp() + " : üì• Iniciando sincroniza√ß√£o (merge) de dados completos com Barrel "
                + existingBarrel.hashCode() + "..."); // Usar ID seria melhor se dispon√≠vel

        try {
            long startTime = System.currentTimeMillis();
            int totalItemsProcessed = 0; // Renomeado para clareza

            // 0. Obter dados da barrel existente
            System.out.println(getTimestamp() + " : üîÑ Obtendo dados da barrel remota...");
            Set<SiteData> existingSiteData = existingBarrel.getSiteDataSet();
            Map<String, Set<String>> existingInvertedIndex = existingBarrel.getInvertedIndex();
            Map<String, Integer> existingUrlReferences = existingBarrel.getUrlReferences();
            Map<String, List<String>> existingIncomingLinks = existingBarrel.getIncomingLinksMap();
            Map<String, String> existingUrlTexts = existingBarrel.getUrlTexts();
            System.out.println(getTimestamp() + " : ‚úÖ Dados remotos obtidos.");

            // 1. Fazer MERGE do siteDataSet (remoto sobrep√µe local em caso de conflito de
            // URL)
            System.out.println(getTimestamp() + " : üîÑ Fazendo merge do SiteData...");
            if (existingSiteData != null) {
                synchronized (siteDataSet) {
                    for (SiteData remoteSiteData : existingSiteData) {
                        remoteSiteData.setPropagated(true); // Marcar como j√° propagado
                        // Remove duplicata local se existir, para usar a vers√£o remota
                        boolean removed = siteDataSet.removeIf(localSite -> localSite.url.equals(remoteSiteData.url));
                        siteDataSet.add(remoteSiteData); // Adiciona a vers√£o remota
                        if (!removed) {
                            totalItemsProcessed++; // Conta como novo item se n√£o existia localmente
                        }
                    }
                }
                System.out.println(
                        getTimestamp() + " : ‚úÖ SiteData merge conclu√≠do - " + existingSiteData.size()
                                + " itens remotos processados. Tamanho atual: " + siteDataSet.size());
            }

            // Usar write lock para atualiza√ß√£o dos √≠ndices
            indexLock.writeLock().lock();
            try {
                // 2. Fazer MERGE do √≠ndice invertido (palavras -> URLs)
                System.out.println(getTimestamp() + " : üîÑ Fazendo merge do √≠ndice invertido...");
                if (existingInvertedIndex != null) {
                    for (Map.Entry<String, Set<String>> entry : existingInvertedIndex.entrySet()) {
                        String word = entry.getKey();
                        Set<String> remoteUrls = entry.getValue();
                        if (remoteUrls == null || remoteUrls.isEmpty())
                            continue;

                        // Merge: adiciona URLs remotas ao conjunto local (Set lida com duplicatas)
                        Set<String> localUrls = invertedIndex.computeIfAbsent(word,
                                k -> ConcurrentHashMap.newKeySet()); // Usa set thread-safe
                        localUrls.addAll(remoteUrls);
                    }
                    totalItemsProcessed += existingInvertedIndex.size(); // Conta palavras processadas
                    System.out.println(getTimestamp() + " : ‚úÖ √çndice invertido merge conclu√≠do - "
                            + existingInvertedIndex.size() + " palavras remotas processadas.");
                }

                // 3. Fazer MERGE das refer√™ncias de URLs (usando contagem m√°xima)
                System.out.println(getTimestamp() + " : üîÑ Fazendo merge das refer√™ncias de URLs...");
                if (existingUrlReferences != null) {
                    existingUrlReferences.forEach(
                            (url, remoteCount) -> urlReferences.compute(url,
                                    // Usa o maior valor entre o local e o remoto
                                    (k, localCount) -> (localCount == null) ? remoteCount
                                            : Math.max(localCount, remoteCount)));
                    totalItemsProcessed += existingUrlReferences.size(); // Conta URLs processadas
                    System.out.println(getTimestamp() + " : ‚úÖ Refer√™ncias de URLs merge conclu√≠do - "
                            + existingUrlReferences.size() + " URLs remotas processadas.");
                }

                // 4. Fazer MERGE dos links de entrada (adicionando apenas links n√£o existentes)
                System.out.println(getTimestamp() + " : üîÑ Fazendo merge dos links de entrada...");
                if (existingIncomingLinks != null) {
                    for (Map.Entry<String, List<String>> entry : existingIncomingLinks.entrySet()) {
                        String targetUrl = entry.getKey();
                        List<String> remoteLinks = entry.getValue();
                        if (remoteLinks == null || remoteLinks.isEmpty())
                            continue;

                        // Merge: adiciona links remotos que n√£o existem localmente
                        List<String> localLinks = incomingLinks.computeIfAbsent(targetUrl,
                                k -> Collections.synchronizedList(new ArrayList<>())); // Usa lista thread-safe
                        synchronized (localLinks) { // Sincroniza a lista espec√≠fica para a verifica√ß√£o/adi√ß√£o
                            for (String remoteLink : remoteLinks) {
                                if (!localLinks.contains(remoteLink)) {
                                    localLinks.add(remoteLink);
                                }
                            }
                        }
                    }
                    totalItemsProcessed += existingIncomingLinks.size(); // Conta URLs alvo processadas
                    System.out.println(getTimestamp() + " : ‚úÖ Links de entrada merge conclu√≠do - "
                            + existingIncomingLinks.size() + " URLs alvo remotas processadas.");
                }

                // 5. Fazer MERGE dos textos associados √†s URLs (mantendo texto local se
                // existir)
                System.out.println(getTimestamp() + " : üîÑ Fazendo merge dos textos de URLs...");
                if (existingUrlTexts != null) {
                    // Adiciona textos remotos apenas se a URL n√£o existe localmente
                    existingUrlTexts.forEach((url, remoteText) -> {
                        urlTexts.putIfAbsent(url, remoteText); // putIfAbsent faz o merge (prioriza local)
                    });
                    totalItemsProcessed += existingUrlTexts.size(); // Conta URLs processadas
                    System.out.println(
                            getTimestamp() + " : ‚úÖ Textos de URLs merge conclu√≠do - " + existingUrlTexts.size()
                                    + " URLs remotas processadas.");
                }
            } finally {
                indexLock.writeLock().unlock();
            }

            // ETAPA 6 REMOVIDA - A RECONSTRU√á√ÉO N√ÉO √â MAIS NECESS√ÅRIA AP√ìS O MERGE DIRETO

            long endTime = System.currentTimeMillis();
            double seconds = (endTime - startTime) / 1000.0;

            System.out.println(getTimestamp() + " : ‚úÖ Sincroniza√ß√£o (merge) conclu√≠da em " + seconds + " segundos!");
            System.out.println(
                    getTimestamp() + " : üìä Total de itens remotos processados (aproximado): " + totalItemsProcessed);
            System.out.println(getTimestamp() + " : üìä Estado final local - Sites: " + siteDataSet.size()
                    + ", Palavras: " + invertedIndex.size() + ", Refs: " + urlReferences.size());

            // Salvar o estado merged no arquivo local
            saveState("data/estado_barrel_" + barrelId + ".json");

        } catch (RemoteException re) {
            System.err.println(getTimestamp() + " : ‚ùå Erro RMI durante a sincroniza√ß√£o (merge): " + re.getMessage());
            re.printStackTrace();
            throw re; // Re-lan√ßa a exce√ß√£o RMI
        } catch (Exception e) {
            System.err.println(getTimestamp() + " : ‚ùå Erro geral durante a sincroniza√ß√£o (merge): " + e.getMessage());
            e.printStackTrace();
            // Considerar lan√ßar uma RemoteException encapsulada ou tratar de outra forma
            throw new RemoteException("Falha na sincroniza√ß√£o (merge) devido a erro interno", e);
        }
    }

    /**
     * Registra uma barrel na lista local de barrels.
     *
     * @param id     Identificador da barrel a ser registrada.
     * @param barrel A barrel a ser registrada.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public synchronized void registeroneIBS(int id, RMIIndexStorageBarrel barrel) throws RemoteException {
        if (id != this.barrelId) {
            barrels.put(id, barrel);
            System.out.println(getTimestamp() + " : üìù Guardando a barrel " + id);
        } else {
            System.out.println(getTimestamp() + " : ‚ö†Ô∏è Ignorando registro da pr√≥pria barrel " + id);
        }
    }

    /**
     * Registra esta barrel em todas as outras barrels do sistema.
     *
     * @param barrells Mapa de barrels existentes.
     * @param myid     Identificador da barrel atual.
     * @param mybarrel Refer√™ncia para a barrel atual.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public synchronized void registerallIBS(Map<Integer, RMIIndexStorageBarrel> barrells, int myid,
            RMIIndexStorageBarrel mybarrel) throws RemoteException {
        System.out.println(getTimestamp() + " : üîÑ Registrando em outras barrels...");

        if (barrells.isEmpty()) {
            System.out.println(getTimestamp() + " : ‚ÑπÔ∏è N√£o h√° outras barrels para registrar");
            return;
        }

        int successCount = 0;
        int failCount = 0;

        // Copiar as entradas para evitar problemas de concorr√™ncia
        List<Map.Entry<Integer, RMIIndexStorageBarrel>> entries = new ArrayList<>(barrells.entrySet());

        for (Map.Entry<Integer, RMIIndexStorageBarrel> entry : entries) {
            int barid = entry.getKey();
            RMIIndexStorageBarrel barr = entry.getValue();

            try {
                if (barid != this.barrelId) {
                    this.registeroneIBS(barid, barr); // Registra a outra em mim
                    barr.registeroneIBS(myid, mybarrel); // Registra a mim na outra
                    barr.gatewaypong("Barrel" + myid); // Verifica se a outra est√° ativa
                    System.out.println(getTimestamp() + " : ‚úÖ Registrada na barrel " + barid);
                    successCount++;
                }
            } catch (RemoteException e) {
                System.err
                        .println(getTimestamp() + " : ‚ùå Falha ao registrar na barrel " + barid + ": " + e.getMessage());
                failCount++;
                // Considerar remover a barrel inativa daqui tamb√©m
                // barrels.remove(barid);
            }
        }

        System.out.println(
                getTimestamp() + " : üìä Registro conclu√≠do - Sucesso: " + successCount + ", Falhas: " + failCount);
    }

    /**
     * M√©todo usado para verificar se a barrel est√° ativa.
     *
     * @param provider Nome do provedor que est√° verificando a atividade.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public void gatewaypong(String provider) throws RemoteException {
        System.out.println(getTimestamp() + " : üîî " + provider + ":Pong");
    }

    /**
     * Armazena dados de um site, atualizando os √≠ndices apropriados.
     * Este m√©todo N√ÉO √© mais synchronized para evitar deadlocks em RMI.
     *
     * @param siteData Dados do site a serem armazenados.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    @Override
    public void storeSiteData(SiteData siteData) throws RemoteException {
        System.out.println(getTimestamp() + " : [Barrel " + barrelId + "] Recebendo storeSiteData para " + siteData.url
                + " | isPropagated=" + siteData.isPropagated());

        if (siteData == null || siteData.url == null || siteData.url.isEmpty()) {
            System.err.println(getTimestamp() + " : ‚ö†Ô∏è Tentativa de armazenar SiteData inv√°lido");
            return;
        }

        // Se j√° foi propagado, apenas processa localmente
        if (siteData.isPropagated()) {
            processLocalUpdate(siteData);
            return;
        }

        // Processa localmente
        processLocalUpdate(siteData);

        // Cria uma C√ìPIA para propagar, marcando como propagado
        SiteData copyToPropagate = new SiteData(siteData.url, siteData.tokens, siteData.links);
        copyToPropagate.text = siteData.text;
        copyToPropagate.title = siteData.title;
        copyToPropagate.setPropagated(true); // Marca a C√ìPIA como propagada

        // Propaga a C√ìPIA para outras barrels (sem lock aqui)
        propagateUpdate(copyToPropagate);
    }

    /**
     * Processa atualiza√ß√£o local dos dados de um site.
     *
     * @param siteData Dados do site a serem processados.
     */
    private void processLocalUpdate(SiteData siteData) {
        if (siteData == null || siteData.url == null || siteData.url.isEmpty()) {
            System.err.println(getTimestamp() + " : ‚ö†Ô∏è SiteData inv√°lido para processamento local");
            return;
        }

        System.out.println(getTimestamp() + " : üìù Processando atualiza√ß√£o local para URL: " + siteData.url);

        // Adquirir write lock para atualizar os √≠ndices
        indexLock.writeLock().lock();
        try {
            // 1. Armazenar metadados b√°sicos
            System.out.println(getTimestamp() + " : üîç Processando metadados para: " + siteData.url);

            // Armazenar texto da p√°gina se dispon√≠vel
            if (siteData.text != null && !siteData.text.isEmpty()) {
                urlTexts.put(siteData.url, siteData.text);
                // System.out.println(getTimestamp() + " : üßæ Texto armazenado (" +
                // siteData.text.length() + " chars)");
            }

            // 2. Processar tokens (palavras-chave)
            if (siteData.tokens != null && !siteData.tokens.isEmpty()) {
                // System.out.println(getTimestamp() + " : üî† Indexando tokens...");
                indexTokens(siteData.tokens, siteData.url);
            } else {
                // System.out.println(getTimestamp() + " : ‚ÑπÔ∏è Nenhum token para indexar");
            }

            // 3. Processar links
            if (siteData.links != null && !siteData.links.isEmpty()) {
                // System.out.println(getTimestamp() + " : üîó Processando links...");
                String[] links = siteData.links.split("\\s+");
                int newLinks = 0;

                for (String link : links) {
                    if (link.isEmpty())
                        continue;

                    // Atualizar contagem de refer√™ncias
                    int newCount = urlReferences.compute(link, (k, v) -> (v == null) ? 1 : v + 1);
                    // System.out.println(getTimestamp() + " : üîó Link encontrado: " + link
                    // + " (contagem atual: " + newCount + ")");
                    if (newCount == 1) {
                        newLinks++;
                        // System.out.println(getTimestamp() + " : üîó Novo link encontrado: " + link);
                    }

                    // Atualizar links de entrada
                    List<String> incomingLinksList = incomingLinks.computeIfAbsent(link,
                            k -> Collections.synchronizedList(new ArrayList<>()));

                    synchronized (incomingLinksList) {
                        if (!incomingLinksList.contains(siteData.url)) {
                            incomingLinksList.add(siteData.url);
                        }
                    }
                }
                // System.out.println(getTimestamp() + " : ‚ûï " + newLinks + " novos links de " +
                // links.length + " totais");
            } else {
                // System.out.println(getTimestamp() + " : ‚ÑπÔ∏è Nenhum link para processar");
            }

            // 4. Atualizar conjunto principal de sites
            synchronized (siteDataSet) {
                // Remover vers√£o anterior se existir
                boolean existed = siteDataSet.removeIf(site -> site.url.equals(siteData.url));
                siteDataSet.add(siteData); // Adiciona a vers√£o atual (pode ser a mesma ou nova)
                // System.out.println(
                // getTimestamp() + " : " + (existed ? "üîÑ Atualizado" : "üÜï Novo") + " SiteData
                // adicionado/atualizado");
            }

        } finally {
            indexLock.writeLock().unlock();
        }

        // 5. Salvar estado (com lock separado para evitar deadlocks)
        // Considerar salvar estado com menos frequ√™ncia para performance
        stateLock.writeLock().lock();
        try {
            // System.out.println(getTimestamp() + " : üíæ Salvando estado...");
            saveState("data/estado_barrel_" + barrelId + ".json");
        } finally {
            stateLock.writeLock().unlock();
        }

        // System.out.println(getTimestamp() + " : ‚úÖ Atualiza√ß√£o local conclu√≠da para: "
        // + siteData.url);
    }

    /**
     * Propaga atualiza√ß√£o de dados para outras barrels.
     *
     * @param siteData Dados do site a serem propagados (DEVE SER UMA C√ìPIA MARCADA
     *                 COMO PROPAGADA).
     */
    public void propagateUpdate(SiteData siteData) throws RemoteException {
        // Garante que estamos propagando um objeto marcado
        if (!siteData.isPropagated()) {
            System.err.println(getTimestamp() + " : ‚ö†Ô∏è ERRO INTERNO: Tentando propagar SiteData n√£o marcado!");
            siteData.setPropagated(true); // Tenta corrigir
        }

        Map<Integer, RMIIndexStorageBarrel> barrelsSnapshot = new HashMap<>(barrels); // Copia para iterar

        if (barrelsSnapshot.isEmpty()) {
            // System.out.println(getTimestamp() + " : ‚ÑπÔ∏è N√£o h√° outras barrels para
            // propagar a atualiza√ß√£o");
            return;
        }

        System.out.println(
                getTimestamp() + " : üì§ Propagando atualiza√ß√£o para " + barrelsSnapshot.size() + " outras barrels...");
        int successCount = 0;
        int failCount = 0;

        for (Map.Entry<Integer, RMIIndexStorageBarrel> entry : barrelsSnapshot.entrySet()) {
            int targetBarrelId = entry.getKey();
            RMIIndexStorageBarrel targetBarrel = entry.getValue();

            try {
                System.out.println(getTimestamp() + " : üì§ Enviando para barrel " + targetBarrelId + "...");
                targetBarrel.storeSiteData(siteData); // Envia a c√≥pia marcada
                System.out.println(
                        getTimestamp() + " : ‚úÖ Atualiza√ß√£o propagada com sucesso para barrel " + targetBarrelId);
                successCount++;
            } catch (RemoteException e) {
                System.err.println(getTimestamp() + " : ‚ùå Falha ao propagar atualiza√ß√£o para barrel " + targetBarrelId
                        + ": " + e.getMessage());
                failCount++;

                // Tenta verificar se a barrel est√° realmente inativa antes de remover
                try {
                    targetBarrel.gatewaypong("PropagateCheck" + barrelId);
                } catch (RemoteException re) {
                    System.err.println(
                            getTimestamp() + " : ‚ùå Barrel " + targetBarrelId
                                    + " n√£o responde ao pong. Removendo do registro local.");
                    barrels.remove(targetBarrelId); // Remove do mapa original
                }
            }
        }

        System.out.println(
                getTimestamp() + " : üìä Propaga√ß√£o conclu√≠da - Sucesso: " + successCount + ", Falhas: " + failCount);
    }

    /**
     * Indexa tokens (palavras) de uma p√°gina.
     *
     * @param tokens Tokens a serem indexados.
     * @param url    URL associada aos tokens.
     */
    private void indexTokens(String tokens, String url) {
        if (tokens == null || tokens.isEmpty() || url == null || url.isEmpty()) {
            return;
        }

        String[] tokenArray = tokens.split("\\s+");
        int tokenCount = 0;

        for (String token : tokenArray) {
            // Normaliza tokens: converte para min√∫sculas e remove caracteres n√£o
            // alfanum√©ricos
            token = token.toLowerCase().replaceAll("[^a-z0-9]", "");
            if (token.isEmpty() || token.length() < 2) {
                continue; // Ignora tokens muito curtos ou vazios
            }

            // Adiciona URL ao conjunto para este token
            Set<String> urlSet = invertedIndex.computeIfAbsent(token, k -> ConcurrentHashMap.newKeySet());
            urlSet.add(url);
            tokenCount++;
        }

        // if (tokenCount > 0) {
        // System.out.println(getTimestamp() + " : üìä Indexados " + tokenCount + "
        // tokens para URL: " + url);
        // }
    }

    /**
     * Pesquisa p√°ginas que cont√™m todas as palavras especificadas, retornando-as
     * ordenadas pelo n√∫mero de links que apontam para elas.
     *
     * @param words Conjunto de palavras a serem pesquisadas.
     * @return Lista de URLs que cont√™m todas as palavras especificadas, ordenadas.
     */
    public List<String> searchPagesByWords(Set<String> words) throws RemoteException { // Adicionado throws
                                                                                       // RemoteException
        if (words == null || words.isEmpty()) {
            return new ArrayList<>();
        }

        Map<String, Integer> pageMatchCount = new HashMap<>();
        indexLock.readLock().lock();
        try {
            // Itera sobre as palavras e conta correspond√™ncias
            for (String word : words) {
                word = word.toLowerCase().trim();
                Set<String> pages = invertedIndex.get(word);
                if (pages != null) {
                    for (String page : pages) {
                        pageMatchCount.put(page, pageMatchCount.getOrDefault(page, 0) + 1);
                    }
                }
            }
        } finally {
            indexLock.readLock().unlock();
        }

        // Filtra as p√°ginas que cont√™m todas as palavras
        List<String> matchingPages = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : pageMatchCount.entrySet()) {
            if (entry.getValue() == words.size()) {
                matchingPages.add(entry.getKey());
            }
        }

        // Ordena as p√°ginas correspondentes pelo n√∫mero de links de entrada
        List<Map.Entry<String, Integer>> sortedAllPages = getPagesOrderedByIncomingLinks(); // Ordena√ß√£o global

        List<String> result = new ArrayList<>();
        for (Map.Entry<String, Integer> sortedEntry : sortedAllPages) {
            if (matchingPages.contains(sortedEntry.getKey())) {
                result.add(sortedEntry.getKey());
            }
        }

        System.out.println(
                getTimestamp() + " : üîç Pesquisa conclu√≠da - Palavras: " + words + ", Resultados ordenados: "
                        + result.size());
        return result;
    }

    /**
     * Retorna a contagem de refer√™ncias para uma URL.
     *
     * @param url URL para a qual a contagem de refer√™ncias deve ser retornada.
     * @return Contagem de refer√™ncias para a URL especificada.
     */
    public int getUrlReferenceCount(String url) {
        indexLock.readLock().lock();
        try {
            return urlReferences.getOrDefault(url, 0);
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * Retorna p√°ginas ordenadas por n√∫mero de links apontando para elas.
     *
     * @return Lista de entradas de p√°ginas ordenadas por contagem de links.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public List<Map.Entry<String, Integer>> getPagesOrderedByIncomingLinks() throws RemoteException {
        indexLock.readLock().lock();
        try {
            List<Map.Entry<String, Integer>> sortedPages = new ArrayList<>(urlReferences.entrySet());
            // Ordena decrescente pelo valor (contagem de links)
            sortedPages.sort((entry1, entry2) -> Integer.compare(entry2.getValue(), entry1.getValue()));
            // Log removido para n√£o poluir
            // for (Map.Entry<String, Integer> entry : sortedPages) {
            // System.out.println(getTimestamp() + " : üìä P√°gina: " + entry.getKey() + ",
            // Links: " + entry.getValue());
            // }
            return sortedPages;
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * Retorna p√°ginas que apontam para uma URL espec√≠fica.
     *
     * @param url URL para a qual as p√°ginas que apontam devem ser retornadas.
     * @return Lista de URLs que apontam para a URL especificada.
     */
    public List<String> getPagesLinkingTo(String url) {
        indexLock.readLock().lock();
        try {
            List<String> result = incomingLinks.getOrDefault(url, Collections.emptyList()); // Usa lista vazia imut√°vel
            return new ArrayList<>(result); // Retorna uma c√≥pia da lista
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * Salva o estado atual da barrel em um arquivo JSON.
     *
     * @param caminhoArquivo Caminho do arquivo onde o estado deve ser salvo.
     */
    public void saveState(String caminhoArquivo) {
        // Adquire o lock de estado para garantir que n√£o haja salvamento concorrente
        stateLock.writeLock().lock();
        try {
            File file = new File(caminhoArquivo);
            File parentDir = file.getParentFile();
            if (parentDir != null && !parentDir.exists()) {
                parentDir.mkdirs();
            }

            Set<SiteData> siteDataCopy;
            // Sincroniza o acesso ao siteDataSet para criar a c√≥pia
            synchronized (siteDataSet) {
                siteDataCopy = new HashSet<>(siteDataSet);
            }

            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            String json = gson.toJson(siteDataCopy);

            try (FileWriter writer = new FileWriter(caminhoArquivo)) {
                writer.write(json);
            }

            System.out.println(
                    getTimestamp() + " : üíæ Estado (" + siteDataCopy.size() + " sites) salvo em: " + caminhoArquivo);

        } catch (Exception e) {
            System.err.println(getTimestamp() + " : ‚ùå Erro ao salvar estado no ficheiro JSON: " + e.getMessage());
            e.printStackTrace();
        } finally {
            stateLock.writeLock().unlock();
        }
    }

    /**
     * Carrega o estado da barrel a partir de um arquivo JSON.
     *
     * @param caminhoArquivo Caminho do arquivo de onde o estado deve ser carregado.
     */
    public void carregarEstadoDeJSON(String caminhoArquivo) {
        File file = new File(caminhoArquivo);
        if (!file.exists()) {
            System.out.println(getTimestamp() + " : ‚ÑπÔ∏è Nenhum estado salvo encontrado em: " + caminhoArquivo);
            return;
        }

        // Adquire locks para garantir exclusividade durante o carregamento
        stateLock.writeLock().lock();
        indexLock.writeLock().lock();
        try (FileReader reader = new FileReader(file)) {
            System.out.println(getTimestamp() + " : üìÇ Carregando estado do arquivo: " + caminhoArquivo);

            Gson gson = new Gson();
            Set<SiteData> loadedSiteData = gson.fromJson(reader, new TypeToken<Set<SiteData>>() {
            }.getType());

            if (loadedSiteData == null) {
                loadedSiteData = new HashSet<>();
            }

            // Limpar estruturas atuais ANTES de carregar e reindexar
            invertedIndex.clear();
            urlReferences.clear();
            urlTexts.clear();
            incomingLinks.clear();
            synchronized (siteDataSet) {
                siteDataSet.clear();
                siteDataSet.addAll(loadedSiteData); // Adiciona os dados carregados
            }

            System.out.println(getTimestamp() + " : üîÑ Reindexando dados carregados...");
            // Reindexa dados localmente a partir do JSON carregado
            for (SiteData siteData : loadedSiteData) {
                // Processar sem propagar, pois j√° est√° no estado salvo
                siteData.setPropagated(true);
                processLocalUpdate(siteData); // Chama o m√©todo que atualiza os √≠ndices
            }

            System.out.println(
                    getTimestamp() + " : üìä Estado carregado e reindexado - Entradas: " + loadedSiteData.size());

        } catch (Exception e) {
            System.err.println(getTimestamp() + " : ‚ùå Erro ao carregar/reindexar estado do JSON: " + e.getMessage());
            e.printStackTrace();
            // Limpa tudo em caso de erro grave no carregamento
            invertedIndex.clear();
            urlReferences.clear();
            urlTexts.clear();
            incomingLinks.clear();
            synchronized (siteDataSet) {
                siteDataSet.clear();
            }
        } finally {
            indexLock.writeLock().unlock();
            stateLock.writeLock().unlock();
        }
    }

    /**
     * Retorna as URLs que apontam para uma URL espec√≠fica, ordenadas pelo n√∫mero
     * de links que apontam para elas.
     *
     * @param url URL para a qual as URLs que apontam devem ser retornadas.
     * @return Lista de URLs que apontam para a URL especificada, ordenadas.
     * @throws RemoteException Se ocorrer um erro de comunica√ß√£o remota.
     */
    public List<String> getIncomingLinksForUrl(String url) throws RemoteException {
        indexLock.readLock().lock();
        try {
            if (url == null || url.isEmpty()) {
                return new ArrayList<>();
            }

            // Obt√©m os links que apontam para a URL
            List<String> referenciadores = incomingLinks.getOrDefault(url, Collections.emptyList());
            if (referenciadores.isEmpty()) {
                return new ArrayList<>();
            }

            // Obt√©m todas as p√°ginas ordenadas por n√∫mero de links
            List<Map.Entry<String, Integer>> sortedPages = getPagesOrderedByIncomingLinks();

            // Filtra os referenciadores com base na ordena√ß√£o global
            List<String> ordenados = new ArrayList<>();
            for (Map.Entry<String, Integer> entry : sortedPages) {
                // Verifica se a p√°gina ordenada est√° na lista de referenciadores
                if (referenciadores.contains(entry.getKey())) {
                    ordenados.add(entry.getKey());
                }
            }

            return ordenados;
        } finally {
            indexLock.readLock().unlock();
        }
    }

    /**
     * M√©todo principal para iniciar a barrel.
     *
     * @param args Argumentos da linha de comando, incluindo o ID da barrel e o
     *             arquivo de propriedades.
     */
    /**
     * M√©todo principal para iniciar a barrel.
     *
     * @param args Argumentos da linha de comando, incluindo o ID da barrel e o
     *             arquivo de propriedades.
     */
    public static void main(String[] args) {
        String registryNibs;
        String myIP = null; // Vari√°vel para armazenar o IP
        RMIGatewayIBSDownloader gateway = null; // Declarar fora do try para acesso no catch final se necess√°rio
        IndexStorageBarrel barrel = null; // Declarar fora do try para acesso no catch final se necess√°rio
        int barrelId = -1; // Inicializar com valor inv√°lido

        try {
            // Verificar argumentos
            if (args.length < 2) {
                System.err.println(
                        LocalDateTime.now() + " : ‚ùå Erro: Necess√°rio fornecer ID da barrel e arquivo de propriedades");
                System.out.println(
                        LocalDateTime.now()
                                + " : ‚ÑπÔ∏è Uso: java IndexStorageBarrel <barrelId> <arquivo.properties> [seu_ip_opcional]");
                System.exit(1);
            }

            // Validar e obter ID da barrel primeiro
            try {
                barrelId = Integer.parseInt(args[0]);
                if (barrelId < 0) { // Adicionar verifica√ß√£o b√°sica de ID
                    System.err.println(LocalDateTime.now() + " : ‚ùå Erro: O ID da barrel (" + args[0]
                            + ") deve ser um n√∫mero n√£o negativo.");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println(LocalDateTime.now() + " : ‚ùå Erro: O ID da barrel (" + args[0]
                        + ") deve ser um n√∫mero inteiro v√°lido.");
                System.exit(1);
            }

            // Tenta obter o IP do terceiro argumento, se fornecido
            if (args.length >= 3) {
                myIP = args[2];
                System.out.println(LocalDateTime.now() + " : ‚ÑπÔ∏è Usando IP fornecido: " + myIP);
            }

            // Carregar arquivo de propriedades
            Properties prop = new Properties();
            try (InputStream input = new FileInputStream(args[1])) {
                System.out.println(LocalDateTime.now() + " : üìù Carregando arquivo de propriedades: " + args[1]);
                prop.load(input);
                System.out.println(LocalDateTime.now() + " : ‚úÖ Arquivo de propriedades carregado com sucesso");

                // Tenta obter o IP do arquivo de propriedades se n√£o foi passado por argumento
                if (myIP == null) {
                    myIP = prop.getProperty("java.rmi.server.hostname");
                    if (myIP != null && !myIP.isEmpty()) {
                        System.out.println(LocalDateTime.now() + " : ‚ÑπÔ∏è Usando IP do arquivo de propriedades: " + myIP);
                    } else {
                        System.out.println(LocalDateTime.now()
                                + " : ‚ö†Ô∏è IP n√£o fornecido por argumento nem no arquivo de propriedades. RMI pode usar IP padr√£o.");
                    }
                }

                // Define a propriedade RMI hostname se um IP foi obtido
                if (myIP != null && !myIP.isEmpty()) {
                    System.setProperty("java.rmi.server.hostname", myIP);
                    System.out.println(LocalDateTime.now() + " : ‚öôÔ∏è Definido java.rmi.server.hostname=" + myIP);
                }

            } catch (Exception e) {
                System.err.println(
                        LocalDateTime.now() + " : ‚ùå Erro ao carregar arquivo de propriedades '" + args[1] + "': "
                                + e.getMessage());
                System.exit(1);
            }

            // Obter endere√ßo do registry RMI
            registryNibs = prop.getProperty("registryNibs");
            if (registryNibs == null || registryNibs.isEmpty()) {
                System.err.println(LocalDateTime.now()
                        + " : ‚ùå Erro: propriedade 'registryNibs' n√£o encontrada no arquivo " + args[1]);
                System.exit(1);
            }
            System.out.println(LocalDateTime.now() + " : üîç Endere√ßo do Gateway RMI: " + registryNibs);

            // Conectar ao gateway
            try {
                System.out.println(LocalDateTime.now() + " : üîÑ Conectando ao gateway em " + registryNibs + "...");
                gateway = (RMIGatewayIBSDownloader) Naming.lookup(registryNibs);
                System.out.println(LocalDateTime.now() + " : ‚úÖ Conex√£o estabelecida com o gateway");
            } catch (Exception e) {
                System.err.println(LocalDateTime.now() + " : ‚ùå Erro fatal ao conectar ao Gateway RMI em " + registryNibs
                        + ": " + e.getMessage());
                e.printStackTrace();
                System.exit(1);
                // return; // N√£o √© mais necess√°rio devido ao System.exit(1)
            }

            // Verificar se o ID da barrel j√° est√° em uso (j√° temos barrelId validado)
            try {
                System.out.println(LocalDateTime.now() + " : üîç Verificando se ID " + barrelId + " j√° est√° em uso...");
                Map<Integer, RMIIndexStorageBarrel> existingBarrels = gateway.getBarrels();
                if (existingBarrels.containsKey(barrelId)) {
                    System.err.println(LocalDateTime.now() + " : ‚ùå ERRO FATAL: J√° existe uma Barrel registrada com ID "
                            + barrelId);
                    System.err.println(LocalDateTime.now() + " : ‚ö†Ô∏è O sistema n√£o permite IDs duplicados.");
                    System.err.println(LocalDateTime.now() + " : üìã IDs j√° registrados: " + existingBarrels.keySet());
                    System.err.println(LocalDateTime.now() + " : üõë O programa ser√° encerrado.");
                    System.exit(1);
                }
                System.out.println(LocalDateTime.now() + " : ‚úÖ ID " + barrelId + " est√° dispon√≠vel.");
            } catch (RemoteException e) {
                System.err.println(
                        LocalDateTime.now() + " : ‚ùå Erro ao verificar IDs existentes no gateway: " + e.getMessage());
                System.exit(1);
            }

            // --- Bloco principal de cria√ß√£o, registro e sincroniza√ß√£o ---
            try {
                // Criar a nova barrel (carrega estado local no construtor)
                System.out.println(LocalDateTime.now() + " : üöÄ Criando IndexStorageBarrel com ID " + barrelId);
                barrel = new IndexStorageBarrel(barrelId); // Atribui √† vari√°vel declarada fora

                // Registrar a barrel no gateway
                System.out.println(LocalDateTime.now() + " : üîÑ Registrando barrel " + barrelId + " no gateway...");
                gateway.registerIBS(barrel.barrelId, barrel);
                System.out.println(
                        LocalDateTime.now() + " : ‚úÖ Barrel " + barrelId + " registrada com sucesso no gateway!");

                // Sincronizar com barrels existentes ap√≥s o registro (fazendo merge)
                System.out.println(
                        LocalDateTime.now() + " : üîÑ Iniciando sincroniza√ß√£o (merge) com barrels existentes...");
                barrel.syncWithExistingBarrels(gateway); // O estado local agora cont√©m o merge

                // Registrar esta barrel nas outras barrels existentes (e vice-versa)
                System.out.println(LocalDateTime.now() + " : üîÑ Registrando esta barrel nas outras existentes...");
                Map<Integer, RMIIndexStorageBarrel> allBarrels = gateway.getBarrels(); // Pega a lista atualizada
                barrel.registerallIBS(allBarrels, barrel.barrelId, barrel);

                System.out.println(
                        LocalDateTime.now() + " : üéâ Barrel " + barrelId + " inicializada e sincronizada!");

                // ---> IN√çCIO DA NOVA L√ìGICA: Propagar o estado final da nova barrel para as
                // outras <---
                System.out.println(LocalDateTime.now() + " : üì§ Iniciando propaga√ß√£o do estado final da Barrel "
                        + barrelId + " para as outras...");
                Set<SiteData> finalLocalState;
                synchronized (barrel.siteDataSet) { // Acessa o set sincronizado da barrel
                    finalLocalState = new HashSet<>(barrel.siteDataSet); // Cria uma c√≥pia segura para iterar
                }

                int propagatedCount = 0;
                if (!finalLocalState.isEmpty()) {
                    System.out.println(LocalDateTime.now() + " : üì§ Propagando " + finalLocalState.size()
                            + " itens do estado final...");
                    for (SiteData siteDataToPropagate : finalLocalState) {
                        try {
                            // Cria uma C√ìPIA para propagar, garantindo que est√° marcada como propagada
                            SiteData copyToPropagate = new SiteData(siteDataToPropagate.url, siteDataToPropagate.tokens,
                                    siteDataToPropagate.links);
                            copyToPropagate.text = siteDataToPropagate.text;
                            copyToPropagate.title = siteDataToPropagate.title;
                            copyToPropagate.setPropagated(true); // ESSENCIAL: Marca a c√≥pia como propagada

                            // Chama o m√©todo que envia para todas as outras barrels conhecidas pela
                            // inst√¢ncia 'barrel'
                            barrel.propagateUpdate(copyToPropagate);
                            propagatedCount++;

                        } catch (RemoteException e) {
                            System.err.println(LocalDateTime.now() + " : ‚ö†Ô∏è Erro RMI ao propagar SiteData para URL "
                                    + siteDataToPropagate.url + ": " + e.getMessage());
                            // Continua com o pr√≥ximo item
                        } catch (Exception e) {
                            System.err.println(
                                    LocalDateTime.now() + " : ‚ùå Erro inesperado ao preparar/propagar SiteData para URL "
                                            + siteDataToPropagate.url + ": " + e.getMessage());
                            e.printStackTrace(); // Log mais detalhado para erros inesperados
                        }
                    }
                    System.out.println(LocalDateTime.now() + " : üì§ Propaga√ß√£o do estado final conclu√≠da. "
                            + propagatedCount + " itens enviados para outras barrels.");
                } else {
                    System.out.println(
                            LocalDateTime.now() + " : ‚ÑπÔ∏è Nenhum SiteData local para propagar ap√≥s sincroniza√ß√£o.");
                }
                // ---> FIM DA NOVA L√ìGICA <---

                System.out.println(
                        LocalDateTime.now() + " : ‚úÖ Barrel " + barrelId + " totalmente operacional.");

            } catch (Exception e) {
                // Este catch lida com erros durante a cria√ß√£o, registro, sync ou propaga√ß√£o
                // final
                System.err.println(LocalDateTime.now()
                        + " : ‚ùå Erro fatal durante a fase de inicializa√ß√£o/sincroniza√ß√£o/propaga√ß√£o da Barrel "
                        + barrelId + ": " + e.getMessage());
                e.printStackTrace();
                // Tentar desregistrar do gateway se j√° foi registrado
                if (gateway != null && barrel != null && barrelId != -1) {
                    try {
                        System.out.println(LocalDateTime.now() + " : üîÑ Tentando desregistrar Barrel " + barrelId
                                + " do gateway devido a erro...");
                        gateway.unsubscribeIBS(barrelId);
                        System.out.println(
                                LocalDateTime.now() + " : ‚úÖ Barrel " + barrelId + " desregistrada do gateway.");
                    } catch (RemoteException re) {
                        System.err.println(LocalDateTime.now() + " : ‚ö†Ô∏è Falha ao desregistrar Barrel " + barrelId
                                + " do gateway: " + re.getMessage());
                    }
                }
                System.exit(1);
            }

            // Catch para erros que podem ocorrer antes da conex√£o com o gateway ou
            // valida√ß√£o de ID
        } catch (Exception e) {
            System.err.println(LocalDateTime.now()
                    + " : ‚ùå Erro inesperado e fatal na inicializa√ß√£o (antes da cria√ß√£o da barrel): " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }

        // Se chegou aqui, a barrel est√° rodando. O programa principal (main thread)
        // pode terminar,
        // mas o objeto RMI (barrel) continuar√° vivo por causa do UnicastRemoteObject.
        System.out.println(LocalDateTime.now() + " : ‚ñ∂Ô∏è Thread principal (main) da Barrel " + barrelId
                + " conclu√≠da. Objeto RMI permanece ativo.");

    }
}